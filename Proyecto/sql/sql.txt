
/* ************************************ TABLA AGENTE ************************************ */
 CREATE TABLE "AGENTE" 
   (	"ID_AGENTE" NUMBER(6,0) NOT NULL ENABLE, 
	"NOMBRE_AGENTE" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"APELLIDOS_AGENTE" VARCHAR2(20 BYTE), 
	"NUMERO_TELEFONO_AGENTE" NUMBER(9,0), 
	"EMAIL_AGENTE" VARCHAR2(20 BYTE), 
	"DEPARTAMENTO" VARCHAR2(15 BYTE), 
	"PRIVILEGIADO" NUMBER(1,0) NOT NULL ENABLE, 
	"VENTAS" NUMBER(2,0) DEFAULT 0 NOT NULL ENABLE, 
	"Nº_INCIDENCIAS" NUMBER(2,0) DEFAULT 0 NOT NULL ENABLE, 
	"MEDIA_VENTAS" NUMBER(2,2) DEFAULT 0, 
	 CONSTRAINT "PRIVILEGIO" CHECK ( PRIVILEGIADO =1 OR PRIVILEGIADO = 0) ENABLE, 
	 CONSTRAINT "AGENTE_PK" PRIMARY KEY ("ID_AGENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA CLIENTE ************************************ */
 
 CREATE TABLE "CLIENTE" 
   (	"ID_CLIENTE" NUMBER(6,0) NOT NULL ENABLE, 
	"NOMBRE" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"APELLIDOS" VARCHAR2(20 BYTE), 
	"DIRECCION" VARCHAR2(20 BYTE), 
	"DNI" VARCHAR2(9 BYTE) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(64 BYTE) NOT NULL ENABLE, 
	"TELEFONO" VARCHAR2(20 BYTE), 
	"CUENTA_ASOCIADA" VARCHAR2(20 BYTE), 
	"FECHA_NACIMIENTO" DATE NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(64 BYTE) NOT NULL ENABLE, 
	 CONSTRAINT "CLIENTE_PK" PRIMARY KEY ("ID_CLIENTE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE, 
	 UNIQUE ("DNI")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA FACTURA ************************************ */

 CREATE TABLE "FACTURA" 
   (	"ID_FACTURA" NUMBER(6,0) NOT NULL ENABLE, 
	"ID_PRODUCTO" NUMBER(6,0), 
	"ID_AGENTE" NUMBER(6,0), 
	"ID_CLIENTE" NUMBER(6,0) NOT NULL ENABLE, 
	"FECHA_FACTURA" DATE DEFAULT SYSDATE, 
	"ID_SERVICIOS" VARCHAR2(10 BYTE), 
	"CUENTA_DEUDORA" NUMBER(24,0), 
	"TOTAL_PAGAR" NUMBER(32,2), 
	 CONSTRAINT "TABLE1_PK" PRIMARY KEY ("ID_FACTURA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;


/* ************************************ TABLA INCIDENCIAS ************************************ */

CREATE TABLE "INCIDENCIA" 
   (	"ID_INCIDENCIA" NUMBER(6,0) NOT NULL ENABLE, 
	"ID_CLIENTE" NUMBER(6,0), 
	"TIPO_INCIDENCIA" VARCHAR2(20 BYTE), 
	"FECHA_INCIDENCIA" DATE DEFAULT SYSDATE, 
	"OBSERVACION" VARCHAR2(120 BYTE), 
	 PRIMARY KEY ("ID_INCIDENCIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE, 
	 FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "CLIENTE" ("ID_CLIENTE") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA LINEAFACTURA ************************************ */

 CREATE TABLE "LINEADEFACTURA" 
   (	"ID_LINEADEFACTURA" NUMBER(6,0), 
	"PRECIO" NUMBER(7,2), 
	"CANTIDAD" NUMBER(2,0), 
	 PRIMARY KEY ("ID_LINEADEFACTURA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA PRODUCTO ************************************ */

 CREATE TABLE "PRODUCTO" 
   (	"ID_PRODUCTO" NUMBER(6,0) NOT NULL ENABLE, 
	"MARCA" VARCHAR2(20 BYTE) DEFAULT NULL, 
	"MODELO" VARCHAR2(10 BYTE) DEFAULT NULL, 
	"NUMERO_BASTIDOR" VARCHAR2(17 BYTE) NOT NULL ENABLE, 
	"POTENCIA_MOTOR" VARCHAR2(6 BYTE), 
	"TIPO_PRODUCTO" VARCHAR2(20 BYTE), 
	"COLOR" VARCHAR2(10 BYTE), 
	"PRECIO_CON_IVA" NUMBER, 
	"STOCK" NUMBER(2,0), 
	"NUMERO_PLAZAS" NUMBER(2,0) NOT NULL ENABLE, 
	 CONSTRAINT "CK_TIPO_PRODUCTO" CHECK (TIPO_PRODUCTO IN ('Coche', 'Furgoneta', 'Camion')) ENABLE, 
	 CONSTRAINT "PROCDUCTO_PK" PRIMARY KEY ("ID_PRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA PROVEEDOR ************************************ */

 CREATE TABLE "PROVEEDOR" 
   (	"ID_PROVEEDOR" NUMBER(6,0) NOT NULL ENABLE, 
	"ID_PRODUCTO" NUMBER(6,0), 
	"NOMBRE_EMPRESA" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"TELEFONO" NUMBER(9,0), 
	"DIRECCION" VARCHAR2(20 BYTE), 
	"NOMBRE_DUEÑO" VARCHAR2(20 BYTE) DEFAULT null, 
	 PRIMARY KEY ("ID_PROVEEDOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE, 
	 FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "PRODUCTO" ("ID_PRODUCTO") ON DELETE CASCADE ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;


/* ************************************ TABLA RESERVAS ************************************ */

CREATE TABLE "RESERVAS" 
   (	"ID_RESERVA" NUMBER(6,0), 
	"ID_CLIENTE" NUMBER(6,0), 
	"ID_PRODUCTO" NUMBER(6,0), 
	"FECHA_RESERVA" DATE DEFAULT sysdate, 
	"ID_AGENTE" NUMBER(6,0), 
	 PRIMARY KEY ("ID_RESERVA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE, 
	 FOREIGN KEY ("ID_CLIENTE")
	  REFERENCES "CLIENTE" ("ID_CLIENTE") ON DELETE CASCADE ENABLE, 
	 FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "PRODUCTO" ("ID_PRODUCTO") ON DELETE SET NULL ENABLE, 
	 CONSTRAINT "RESERVAS_FK1" FOREIGN KEY ("ID_AGENTE")
	  REFERENCES "AGENTE" ("ID_AGENTE") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ TABLA SERVICIOS ************************************ */

 CREATE TABLE "SERVICIOS" 
   (	"ID_SERVICIOS" NUMBER(6,0), 
	"TIPO_SERVICIO" VARCHAR2(20 BYTE), 
	"DESCRIPCION" VARCHAR2(120 BYTE) NOT NULL ENABLE, 
	"PRECIO" NUMBER(6,0), 
	"ACTIVO" NUMBER(1,0), 
	 PRIMARY KEY ("ID_SERVICIOS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

/* ************************************ SECUENCIAS ************************************ */

 CREATE SEQUENCE sec_agente 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_cliente 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_factura 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_incidencia 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_producto 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_proveedor 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_reservas 
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;
CREATE SEQUENCE sec_servicios
        INCREMENT BY 1
        START WITH   1
        MAXVALUE 9999;


/* ************************************ TRIGGERS ASOCIADOS A SECUENCIAS************************************ */

/*AGENTE

CREATE OR REPLACE TRIGGER tr_secagente
BEFORE INSERT ON AGENTE
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_agente.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_AGENTE := valorSec;
END;

/*CLIENTE

CREATE OR REPLACE TRIGGER tr_seccliente
BEFORE INSERT ON CLIENTE
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_cliente.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_CLIENTE := valorSec;
END;

/*FACTURA 

CREATE OR REPLACE TRIGGER tr_secfactura
BEFORE INSERT ON FACTURA
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_factura.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_FACTURA := valorSec;
END;

/*INCIDENCIA

CREATE OR REPLACE TRIGGER tr_secincidencia
BEFORE INSERT ON INCIDENCIA
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_incidencia.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_INCIDENCIA := valorSec;
END;

/*PRODUCTO 

CREATE OR REPLACE TRIGGER tr_secproducto
BEFORE INSERT ON PRODUCTO
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_producto.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_PRODUCTO := valorSec;
END;

/*PROVEEDOR            

CREATE OR REPLACE TRIGGER tr_secproveedor
BEFORE INSERT ON PROVEEDOR
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_proveedor.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_PROVEEDOR := valorSec;
END;

/*RESERVAS

CREATE OR REPLACE TRIGGER tr_secreservas
BEFORE INSERT ON RESERVAS
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_reservas.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_RESERVA := valorSec;
END

/*SERVICIOS 

CREATE OR REPLACE TRIGGER tr_secservicios
BEFORE INSERT ON SERVICIOS
FOR EACH ROW
DECLARE
valorSec NUMBER := 0;
BEGIN
SELECT sec_servicios.NEXTVAL INTO valorSec FROM DUAL;
:NEW.ID_SERVICIOS := valorSec;
END;

/* ************************************ PROCEDIMIENTOS Y FUNCIONES ************************************ */

/*BUSQUEDA DE UN PRODUCTO:

Create or Replace Procedure Buscador_Producto (codigo_producto IN producto.id_producto%TYPE) AS

m_producto producto.marca%TYPE;
modelo_producto producto.modelo%TYPE;
p_producto producto.precio_con_iva%TYPE;

BEGIN 
    SELECT marca , modelo , precio_con_iva 
    INTO m_producto , modelo_producto ,p_producto
    FROM producto
    WHERE id_producto=codigo_producto;
    --
    dbms_output.put_line('Marca del producto : '|| m_producto);
    DBMS_OUTPUT.PUT_LINE('Modelo del producto : '||modelo_producto);
    dbms_output.put_line('Precio con iva del producto :'||p_producto ||'');
    --
   
 END Buscador_producto;

GENERADOR PRODUCTO:    

CREATE OR REPLACE PROCEDURE Registra_producto(codigo_producto producto.id_producto%TYPE,
                        MARCA producto.marca%TYPE ,Modelo producto.modelo%TYPE , bastidor producto.numero_bastidor%TYPE,
                        potencia producto.potencia_motor%TYPE ,t_producto producto.tipo_producto%TYPE, color producto.color%TYPE , precio producto.precio_con_iva%TYPE ,
                        stock producto.stock%TYPE , num_plazas producto.numero_plazas%TYPE ) AS
       Begin                 
                INSERT into PRODUCTO ( ID_PRODUCTO,MARCA,MODELO,NUMERO_BASTIDOR,POTENCIA_MOTOR,TIPO_PRODUCTO,
                COLOR,PRECIO_CON_IVA,STOCK,NUMERO_PLAZAS) VALUES (codigo_producto, MARCA,Modelo,bastidor,potencia,t_producto,color,precio,
                stock,num_plazas);
                COMMIT;
END Registra_producto;  





/* ************************************ PAQUETE FACTURA ************************************ */

CREATE OR REPLACE PACKAGE PCK_FACTURA
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,V_ID_PRODUCTO IN FACTURA.ID_PRODUCTO%TYPE, V_FECHA_FACTURA IN FACTURA.FECHA_FACTURA%TYPE, V_NOMBRE_AGENTE IN factura.id_agente%TYPE,V_NOMBRE_CLIENTE factura.id_cliente%TYPE , V_NOMBRE_SERVICIOS factura.id_servicios%TYPE,V_PRECIO_TOTAL IN factura.total_pagar%TYPE, V_CUENTA_DEUDORA IN FACTURA.CUENTA_DEUDORA%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,V_ID_PRODUCTO IN FACTURA.ID_PRODUCTO%TYPE, V_FECHA_FACTURA IN FACTURA.FECHA_FACTURA%TYPE, V_NOMBRE_AGENTE IN factura.id_agente%TYPE,V_NOMBRE_CLIENTE factura.id_cliente%TYPE , V_NOMBRE_SERVICIOS factura.id_servicios%TYPE,V_PRECIO_TOTAL IN factura.total_pagar%TYPE, V_CUENTA_DEUDORA IN FACTURA.CUENTA_DEUDORA%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE, salidaEsperada BOOLEAN);

END;
/
CREATE OR REPLACE PACKAGE BODY PCK_FACTURA
IS
    CURSOR C IS
        SELECT ID_FACTURA ,
FECHA_FACTURA ,
CUENTA_DEUDORA ,
TOTAL_PAGAR ,
ID_AGENTE ,
ID_CLIENTE ,
ID_PRODUCTO ,
ID_SERVICIOS  FROM FACTURA;
    v_Salida BOOLEAN := TRUE;
    V_FACTURA FACTURA%ROWTYPE;
   
PROCEDURE Inicializar
    IS
    BEGIN
        DELETE FROM FACTURA;
    END Inicializar;
PROCEDURE Consultar
    IS
    BEGIN
        OPEN C;
        FETCH C INTO V_FACTURA;
        DBMS_OUTPUT.PUT_LINE(RPAD('ID_FACTURA  :', 25) || RPAD('ID_PRODUCTO :', 25) || RPAD('FECHA_FACTURA :', 25) || RPAD('NOMBRE_AGENTE :', 25) || RPAD('NOMBRE_CLIENTE_FACTURA :', 25)||RPAD('NOMBRE_SERVICIOS_FACTURA:',25)  || RPAD('PRECIO_TOTAL_FACTURA:' , 25)|| RPAD('CUENTA_DEUDORA_FACTURA:' , 25) );
        DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
        WHILE C%FOUND LOOP 
            DBMS_OUTPUT.PUT_LINE(RPAD(V_FACTURA.ID_FACTURA  , 25) || RPAD(V_FACTURA.ID_PRODUCTO, 25) || RPAD(V_FACTURA.FECHA_FACTURA, 25) || RPAD(V_FACTURA.NOMBRE_AGENTE, 25) || RPAD(V_FACTURA.NOMBRE_CLIENTE_FACTURA, 25) || RPAD(V_FACTURA.NOMBRE_SERVICIOS_FACTURA, 25) || RRAD(V_FACTURA.PRECIO_TOTAL_FACTURA, 25)|| RRAD(V_FACTURA.CUENTA_DEUDORA_FACTURA, 25) );
        FETCH C INTO V_FACTURA;
        END LOOP;
        CLOSE C;
    END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,V_ID_PRODUCTO IN FACTURA.ID_PRODUCTO%TYPE, V_FECHA_FACTURA IN FACTURA.FECHA_FACTURA%TYPE, V_NOMBRE_AGENTE IN factura.id_agente%TYPE,V_NOMBRE_CLIENTE factura.id_cliente%TYPE , V_NOMBRE_SERVICIOS factura.id_servicios%TYPE,V_PRECIO_TOTAL IN factura.total_pagar%TYPE, V_CUENTA_DEUDORA IN FACTURA.CUENTA_DEUDORA%TYPE, salidaEsperada BOOLEAN)
    IS
    BEGIN
        INSERT INTO FACTURA (ID_FACTURA, ID_PRODUCTO,FECHA_FACTURA, NOMBRE_AGENTE  , NOMBRE_CLIENTE_FACTURA, NOMBRE_SERVICIOS_FACTURA, PRECIO_TOTAL_FACTURA,CUENTA_DEUDORA_FACTURA) VALUES (V_ID_FACTURA, V_ID_PRODUCTO_FACTURA, V_FECHA_FACTURA, V_NOMBRE_AGENTE, V_NOMBRE_CLIENTE, v_nombre_servicios, V_PRECIO_TOTAL, V_CUENTA_DEUDORA);
        SELECT ID_FACTURA ,
FECHA_FACTURA ,
CUENTA_DEUDORA ,
TOTAL_PAGAR ,
ID_AGENTE ,
ID_CLIENTE ,
ID_PRODUCTO ,
ID_SERVICIOS  INTO V_FACTURA FROM FACTURA WHERE ID_FACTURA = V_ID_FACTURA;
        IF V_FACTURA.FECHA_FACTURA != v_fecha_factura
          AND V_FACTURA.NOMBRE_AGENTE   != V_NOMBRE_AGENTE
          AND V_FACTURA.NOMBRE_CLIENTE_FACTURA != V_NOMBRE_CLIENTE
          AND V_FACTURA.NOMBRE_SERVICIOS_FACTURA != V_NOMBRE_SERVICIOS
          AND V_FACTURA.PRECIO_TOTAL_FACTURA != V_PRECIO_TOTAL
          AND V_FACTURA.CUENTA_DEUDORA_FACTURA != V_CUENTA_DEUDORA
               THEN
            v_Salida := FALSE;
        END IF;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
                ROLLBACK;
    END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,V_ID_PRODUCTO IN FACTURA.ID_PRODUCTO%TYPE, V_FECHA_FACTURA IN FACTURA.FECHA_FACTURA%TYPE, V_NOMBRE_AGENTE IN factura.id_agente%TYPE,V_NOMBRE_CLIENTE factura.id_cliente%TYPE , V_NOMBRE_SERVICIOS factura.id_servicios%TYPE,V_PRECIO_TOTAL IN factura.total_pagar%TYPE, V_CUENTA_DEUDORA IN FACTURA.CUENTA_DEUDORA%TYPE, salidaEsperada BOOLEAN)
    IS
    BEGIN
        UPDATE FACTURA SET  ID_FACTURA = V_ID_FACTURA ,
                            ID_PRODUCTO = V_ID_PRODUCTO, 
                            FECHA_FACTURA = V_FECHA_FACTURA,
                            ID_AGENTE=V_NOMBRE_AGENTE ,
                            ID_CLIENTE =V_NOMBRE_CLIENTE , 
                            CUENTA_DEUDORA = v_cuenta_deudora,
                            TOTAL_PAGAR=v_precio_total
                            WHERE ID_FACTURA = V_ID_FACTURA;
        SELECT ID_FACTURA ,
FECHA_FACTURA ,
CUENTA_DEUDORA ,
TOTAL_PAGAR ,
ID_AGENTE ,
ID_CLIENTE ,
ID_PRODUCTO ,
ID_SERVICIOS  INTO V_FACTURA FROM FACTURA WHERE ID_FACTURA = V_ID_FACTURA;
        IF V_FACTURA.FECHA_FACTURA != v_fecha_factura
          AND V_FACTURA.ID_PRODUCTO != v_id_producto
          AND V_FACTURA.ID_AGENTE != V_NOMBRE_AGENTE
          AND V_FACTURA.ID_CLIENTE != v_nombre_cliente
          AND V_FACTURA.CUENTA_DEUDORA != v_cuenta_deudora
          AND V_FACTURA.TOTAL_PAGAR != v_precio_total
         
          THEN
  v_Salida := FALSE;
  END IF;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
                ROLLBACK;
    END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2, V_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE, salidaEsperada BOOLEAN)
    IS
        V_NUM_FACTURA NUMBER := 0;
    BEGIN
        DELETE FROM FACTURA WHERE ID_FACTURA = V_ID_FACTURA;
        SELECT COUNT(*) INTO V_NUM_FACTURA FROM FACTURA WHERE ID_FACTURA = V_ID_FACTURA;
        IF V_NUM_FACTURA != 0 THEN
            v_Salida := FALSE;
        END IF;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
                ROLLBACK;
    END Eliminar;
END;
/



/* ************************************ PAQUETE AGENTE ************************************ */
CREATE OR REPLACE PACKAGE PCK_AGENTE
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, V_NOMBRE_AGENTE IN AGENTE.NOMBRE_AGENTE%TYPE, V_APELLIDOS_AGENTE IN AGENTE.APELLIDOS_AGENTE%TYPE, V_NUMERO_TELEFONO_AGENTE IN AGENTE.NUMERO_TELEFONO_AGENTE%TYPE, V_EMAIL_AGENTE IN AGENTE.EMAIL_AGENTE%TYPE, V_DEPARTAMENTO IN AGENTE.DEPARTAMENTO%TYPE, V_PRIVILEGIADO IN AGENTE.PRIVILEGIADO%TYPE, V_VENTAS IN AGENTE.VENTAS%TYPE, V_Nº_INCIDENCIAS IN AGENTE.Nº_INCIDENCIAS%TYPE, V_MEDIA_VENTAS IN AGENTE.MEDIA_VENTAS%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, V_NOMBRE_AGENTE IN AGENTE.NOMBRE_AGENTE%TYPE, V_APELLIDOS_AGENTE IN AGENTE.APELLIDOS_AGENTE%TYPE, V_NUMERO_TELEFONO_AGENTE IN AGENTE.NUMERO_TELEFONO_AGENTE%TYPE, V_EMAIL_AGENTE IN AGENTE.EMAIL_AGENTE%TYPE, V_DEPARTAMENTO IN AGENTE.DEPARTAMENTO%TYPE, V_PRIVILEGIADO IN AGENTE.PRIVILEGIADO%TYPE, V_VENTAS IN AGENTE.VENTAS%TYPE, V_Nº_INCIDENCIAS IN AGENTE.Nº_INCIDENCIAS%TYPE, V_MEDIA_VENTAS IN AGENTE.MEDIA_VENTAS%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, salidaEsperada BOOLEAN);

END;
/

--Cuerpo de Paquete de AGENTE
CREATE OR REPLACE PACKAGE BODY PCK_AGENTE
IS
CURSOR C IS
SELECT * FROM AGENTE;
v_Salida BOOLEAN := TRUE;
V_AGENTE AGENTE%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM AGENTE;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO V_AGENTE;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_AGENTE  :', 25) || RPAD('NOMBRE_AGENTE :', 25) || RPAD('APELLIDOS_AGENTE :', 25) || RPAD('NUMERO_TELEFONO_AGENTE  :', 25) || RPAD('EMAIL_AGENTE :', 25) || RPAD('DEPARTAMENTO :', 25) || RPAD('PRIVILEGIADO :', 25) || RPAD('VENTAS  :', 25) || RPAD('Nº_INCIDENCIAS :', 25) || RPAD('MEDIA_VENTAS :', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP 
DBMS_OUTPUT.PUT_LINE(RPAD(V_AGENTE.ID_AGENTE  , 25) || RPAD(V_AGENTE.NOMBRE_AGENTE , 25) || RPAD(V_AGENTE.APELLIDOS_AGENTE , 25) || RPAD(V_AGENTE.NUMERO_TELEFONO_AGENTE , 25) || RPAD(V_AGENTE.EMAIL_AGENTE, 25) || RPAD(V_AGENTE.DEPARTAMENTO, 25) || RPAD(V_AGENTE.PRIVILEGIADO, 25) || RPAD(V_AGENTE.VENTAS , 25) || RPAD(V_AGENTE.Nº_INCIDENCIAS, 25) || RPAD(V_AGENTE.MEDIA_VENTAS, 25));
        FETCH C INTO V_AGENTE;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, V_NOMBRE_AGENTE IN AGENTE.NOMBRE_AGENTE%TYPE, V_APELLIDOS_AGENTE IN AGENTE.APELLIDOS_AGENTE%TYPE, V_NUMERO_TELEFONO_AGENTE IN AGENTE.NUMERO_TELEFONO_AGENTE%TYPE, V_EMAIL_AGENTE IN AGENTE.EMAIL_AGENTE%TYPE, V_DEPARTAMENTO IN AGENTE.DEPARTAMENTO%TYPE, V_PRIVILEGIADO IN AGENTE.PRIVILEGIADO%TYPE, V_VENTAS IN AGENTE.VENTAS%TYPE, V_Nº_INCIDENCIAS IN AGENTE.Nº_INCIDENCIAS%TYPE, V_MEDIA_VENTAS IN AGENTE.MEDIA_VENTAS%TYPE, salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO AGENTE (ID_AGENTE, NOMBRE_AGENTE, APELLIDOS_AGENTE, NUMERO_TELEFONO_AGENTE, EMAIL_AGENTE, DEPARTAMENTO, PRIVILEGIADO, VENTAS, Nº_INCIDENCIAS, MEDIA_VENTAS) VALUES (V_ID_AGENTE, V_NOMBRE_AGENTE, V_APELLIDOS_AGENTE, V_NUMERO_TELEFONO_AGENTE, V_EMAIL_AGENTE, V_DEPARTAMENTO, V_PRIVILEGIADO, V_VENTAS, V_Nº_INCIDENCIAS, V_MEDIA_VENTAS);
SELECT * INTO V_AGENTE FROM AGENTE WHERE ID_AGENTE = V_ID_AGENTE;
IF V_AGENTE.NOMBRE_AGENTE != V_NOMBRE_AGENTE 
          AND V_AGENTE.APELLIDOS_AGENTE != V_APELLIDOS_AGENTE
          AND V_AGENTE.APELLIDOS_AGENTE != V_APELLIDOS_AGENTE
          AND V_AGENTE.NUMERO_TELEFONO_AGENTE != V_NUMERO_TELEFONO_AGENTE
          AND V_AGENTE.EMAIL_AGENTE != V_EMAIL_AGENTE
          AND V_AGENTE.DEPARTAMENTO != V_DEPARTAMENTO
          AND V_AGENTE.PRIVILEGIADO != V_PRIVILEGIADO
          AND V_AGENTE.VENTAS != V_VENTAS
          AND V_AGENTE.Nº_INCIDENCIAS != V_Nº_INCIDENCIAS
          AND V_AGENTE.MEDIA_VENTAS != V_MEDIA_VENTAS
               THEN
        v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, V_NOMBRE_AGENTE IN AGENTE.NOMBRE_AGENTE%TYPE, V_APELLIDOS_AGENTE IN AGENTE.APELLIDOS_AGENTE%TYPE, V_NUMERO_TELEFONO_AGENTE IN AGENTE.NUMERO_TELEFONO_AGENTE%TYPE, V_EMAIL_AGENTE IN AGENTE.EMAIL_AGENTE%TYPE, V_DEPARTAMENTO IN AGENTE.DEPARTAMENTO%TYPE, V_PRIVILEGIADO IN AGENTE.PRIVILEGIADO%TYPE, V_VENTAS IN AGENTE.VENTAS%TYPE, V_Nº_INCIDENCIAS IN AGENTE.Nº_INCIDENCIAS%TYPE, V_MEDIA_VENTAS IN AGENTE.MEDIA_VENTAS%TYPE, salidaEsperada BOOLEAN)
    IS
BEGIN
UPDATE AGENTE SET NOMBRE_AGENTE = V_NOMBRE_AGENTE,
                            APELLIDOS_AGENTE = V_APELLIDOS_AGENTE, 
                            NUMERO_TELEFONO_AGENTE = V_NUMERO_TELEFONO_AGENTE, 
                            EMAIL_AGENTE = V_EMAIL_AGENTE, 
                            DEPARTAMENTO = V_DEPARTAMENTO, 
                            PRIVILEGIADO = V_PRIVILEGIADO, 
                            VENTAS = V_VENTAS, 
                            Nº_INCIDENCIAS = V_Nº_INCIDENCIAS, 
                            MEDIA_VENTAS = V_MEDIA_VENTAS 
                            WHERE ID_AGENTE = V_ID_AGENTE;
SELECT * INTO V_AGENTE FROM AGENTE WHERE ID_AGENTE = V_ID_AGENTE;
IF V_AGENTE.NOMBRE_AGENTE != V_NOMBRE_AGENTE 
          AND V_AGENTE.APELLIDOS_AGENTE != V_APELLIDOS_AGENTE
          AND V_AGENTE.APELLIDOS_AGENTE != V_APELLIDOS_AGENTE
          AND V_AGENTE.NUMERO_TELEFONO_AGENTE != V_NUMERO_TELEFONO_AGENTE
          AND V_AGENTE.EMAIL_AGENTE != V_EMAIL_AGENTE
          AND V_AGENTE.DEPARTAMENTO != V_DEPARTAMENTO
          AND V_AGENTE.PRIVILEGIADO != V_PRIVILEGIADO
          AND V_AGENTE.VENTAS != V_VENTAS
          AND V_AGENTE.Nº_INCIDENCIAS != V_Nº_INCIDENCIAS
          AND V_AGENTE.MEDIA_VENTAS != V_MEDIA_VENTAS 
          THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2, V_ID_AGENTE IN AGENTE.ID_AGENTE%TYPE, salidaEsperada BOOLEAN)
IS
V_NUM_AGENTE NUMBER := 0;
BEGIN
DELETE FROM AGENTE WHERE ID_AGENTE = V_ID_AGENTE;
SELECT COUNT(*) INTO V_NUM_AGENTE FROM AGENTE WHERE ID_AGENTE = V_ID_AGENTE;
IF V_NUM_AGENTE != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/


/* ************************************ PAQUETE CLIENTE ************************************ */

CREATE OR REPLACE PACKAGE PCK_Cliente
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_Cliente IN cliente.id_cliente%TYPE,V_Nombre IN cliente.nombre%TYPE, V_APELLIDOS IN cliente.apellidos%TYPE,V_DIRECCION IN cliente.direccion%TYPE,V_DNI IN cliente.dni%TYPE,V_EMAIL IN cliente.email%TYPE, V_TELEFONO IN cliente.telefono%TYPE,V_CUENTA_ASOCIADA IN cliente.cuenta_asociada%TYPE,V_FECHA_NACIMIENTO IN cliente.fecha_nacimiento%TYPE ,salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_Cliente IN cliente.id_cliente%TYPE,V_Nombre IN cliente.nombre%TYPE, V_APELLIDOS IN cliente.apellidos%TYPE,V_DIRECCION IN cliente.direccion%TYPE,V_DNI IN cliente.dni%TYPE,V_EMAIL IN cliente.email%TYPE, V_TELEFONO IN cliente.telefono%TYPE,V_CUENTA_ASOCIADA IN cliente.cuenta_asociada%TYPE,V_FECHA_NACIMIENTO IN cliente.fecha_nacimiento%TYPE ,salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_CLIENTE IN cliente.id_cliente%TYPE, salidaEsperada BOOLEAN);

END;
/
CREATE OR REPLACE PACKAGE BODY PCK_Cliente
IS
CURSOR C IS
SELECT ID_CLIENTE ,
NOMBRE ,
APELLIDOS ,
DIRECCION ,
DNI ,
EMAIL ,
TELEFONO ,
CUENTA_ASOCIADA ,
FECHA_NACIMIENTO  FROM Cliente;
v_Salida BOOLEAN := TRUE;
v_Cliente Cliente%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM Cliente;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_Cliente;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_CLIENTE', 25) || RPAD('NOMBRE', 25)|| RPAD('APELLIDOS', 25)|| RPAD('DIRECCION', 25)|| RPAD('DNI', 25)|| RPAD('EMAIL', 25)|| RPAD('TELEFONO', 25)|| RPAD('CUENTA_asociada', 25)|| RPAD('FECHA_nacimiento', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
    DBMS_OUTPUT.PUT_LINE(RPAD(V_CLiente.ID_CLIENTE, 25) || RPAD(V_CLiente.NOMBRE, 25)|| RPAD(V_CLiente.APELLIDOS, 25)|| RPAD(V_CLiente.DIRECCION, 25) || RPAD(V_CLiente.DNI, 25)|| RPAD(V_CLiente.EMAIL, 25) || RPAD(V_CLiente.TELEFONO, 25)|| RPAD(V_CLiente.CUENTA_asociada, 25)|| RPAD(V_CLiente.FECHA_nacimiento, 25));
FETCH C INTO v_CLiente;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_Cliente IN cliente.id_cliente%TYPE,V_Nombre IN cliente.nombre%TYPE, V_APELLIDOS IN cliente.apellidos%TYPE,V_DIRECCION IN cliente.direccion%TYPE,V_DNI IN cliente.dni%TYPE,V_EMAIL IN cliente.email%TYPE, V_TELEFONO IN cliente.telefono%TYPE,V_CUENTA_ASOCIADA IN cliente.cuenta_asociada%TYPE,V_FECHA_NACIMIENTO IN cliente.fecha_nacimiento%TYPE ,salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO CLIENTE (ID_CLIENTE,NOMBRE,APELLIDOS,DIRECCION,DNI,EMAIL,TELEFONO,CUENTA_asociada,FECHA_nacimiento) VALUES (V_ID_CLIENTE,V_NOMBRE,V_APELLIDOS,V_DIRECCION,V_DNI,V_EMAIL,V_TELEFONO,v_cuenta_asociada,V_FECHA_NACIMIENTO);
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_Cliente IN cliente.id_cliente%TYPE,V_Nombre IN cliente.nombre%TYPE, V_APELLIDOS IN cliente.apellidos%TYPE,V_DIRECCION IN cliente.direccion%TYPE,V_DNI IN cliente.dni%TYPE,V_EMAIL IN cliente.email%TYPE, V_TELEFONO IN cliente.telefono%TYPE,V_CUENTA_ASOCIADA IN cliente.cuenta_asociada%TYPE,V_FECHA_NACIMIENTO IN cliente.fecha_nacimiento%TYPE ,salidaEsperada BOOLEAN )
IS
BEGIN
UPDATE CLIENTE SET NOMBRE=V_NOMBRE, APELLIDOS=v_apellidos,DIRECCION=V_DIRECCION,DNI=V_DNI,EMAIL=V_EMAIL,TELEFONO=V_TELEFONO,CUENTA_asociada= V_CUENTA_ASOCIADA,FECHA_nacimiento=v_fecha_nacimiento WHERE ID_CLIENTE = v_id_cliente;
SELECT ID_CLIENTE ,
NOMBRE ,
APELLIDOS ,
DIRECCION ,
DNI ,
EMAIL ,
TELEFONO ,
CUENTA_ASOCIADA ,
FECHA_NACIMIENTO  INTO v_CLiente FROM CLIENTE WHERE ID_CLIENTE = v_id_cliente;
IF V_CLiente.NOMBRE != v_nombre AND v_CLiente.APELLIDOS  != v_apellidos AND v_CLiente.DIRECCION != v_direccion AND V_CLiente.DNI!= v_dni AND V_CLiente.EMAIL !=V_EMAIL AND V_CLiente.TELEFONO != V_TELEFONO AND V_CLiente.CUENTA_asociada !=v_cuenta_asociada AND V_CLiente.FECHA_nacimiento !=v_fecha_nacimiento THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_CLIENTE IN cliente.id_cliente%type, salidaEsperada BOOLEAN)
IS
v_numCLiente NUMBER := 0;
BEGIN
DELETE FROM CLIENTE WHERE ID_CLIENTE = v_id_cliente;
SELECT COUNT(*) INTO v_numCLiente FROM CLIENTE WHERE ID_CLIENTE = v_id_cliente;
IF v_numcliente != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/


/* ************************************ PAQUETE INCIDENCIA ************************************ */

CREATE OR REPLACE PACKAGE PCK_INCIDENCIA
IS
PROCEDURE Inicializar;
PROCEDURE Consultar;
PROCEDURE Insertar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE,V_TIPO_INCIDENCIA IN incidencia.tipo_incidencia%TYPE,V_FECHA_INCIDENCIA IN incidencia.fecha_incidencia%TYPE,V_OBSERVACION IN incidencia.observacion%TYPE , salidaEsperada BOOLEAN);
PROCEDURE Actualizar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE,V_TIPO_INCIDENCIA IN incidencia.tipo_incidencia%TYPE,V_FECHA_INCIDENCIA IN incidencia.fecha_incidencia%TYPE,V_OBSERVACION IN incidencia.observacion%TYPE , salidaEsperada BOOLEAN);
PROCEDURE Eliminar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE, salidaEsperada BOOLEAN);
END;
/
CREATE OR REPLACE PACKAGE BODY PCK_INCIDENCIA
IS
CURSOR C IS
SELECT ID_INCIDENCIA ,
TIPO_INCIDENCIA ,
FECHA_INCIDENCIA ,
OBSERVACION  FROM INCIDENCIA;
v_Salida BOOLEAN := TRUE;
v_INCIDENCIA INCIDENCIA%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM INCIDENCIA;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_INCIDENCIA;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_INCIDENCIA', 25) || RPAD('TIPO_INCIDENCIA', 75) || RPAD('FECHA_INCIDENCIA', 75)|| RPAD('OBSERVACION', 120));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 300, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD('V_INCIDENCIA.ID_INCIDENCIA', 75)|| RPAD('V_INCIDENCIA.TIPO_INCIDENCIA', 75)|| RPAD('V_INCIDENCIA.FECHA_INCIDENCIA', 75)|| RPAD('V_INCIDENCIA.OBSERVACION', 120));
FETCH C INTO v_INCIDENCIA;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE,V_TIPO_INCIDENCIA IN incidencia.tipo_incidencia%TYPE,V_FECHA_INCIDENCIA IN incidencia.fecha_incidencia%TYPE,V_OBSERVACION IN incidencia.observacion%TYPE , salidaEsperada BOOLEAN )
IS
BEGIN
INSERT INTO INCIDENCIA (ID_INCIDENCIA,TIPO_INCIDENCIA,FECHA_INCIDENCIA,OBSERVACION) VALUES (v_id_incidencia,v_tipo_incidencia,v_fecha_incidencia,v_observacion);
SELECT ID_INCIDENCIA ,
TIPO_INCIDENCIA ,
FECHA_INCIDENCIA ,
OBSERVACION  INTO v_INCIDENCIA FROM INCIDENCIA WHERE id_incidencia = v_id_incidencia;
IF (v_tipo_incidencia != v_INCIDENCIA.tipo_incidencia AND v_INCIDENCIA.fecha_incidencia!= v_fecha_incidencia AND v_INCIDENCIA.OBSERVACION != v_observacion AND V_INCIDENCIA.ID_INCIDENCIA != v_id_incidencia  ) THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE,V_TIPO_INCIDENCIA IN incidencia.tipo_incidencia%TYPE,V_FECHA_INCIDENCIA IN incidencia.fecha_incidencia%TYPE,V_OBSERVACION IN incidencia.observacion%TYPE , salidaEsperada BOOLEAN)
IS
BEGIN
UPDATE INCIDENCIA SET ID_INCIDENCIA =v_id_incidencia, TIPO_INCIDENCIA =v_tipo_incidencia, FECHA_INCIDENCIA=v_fecha_incidencia, OBSERVACION = v_observacion WHERE
ID_INCIDENCIA = v_id_incidencia;
SELECT ID_INCIDENCIA ,
TIPO_INCIDENCIA ,
FECHA_INCIDENCIA ,
OBSERVACION  INTO v_INCIDENCIA FROM INCIDENCIA WHERE ID_INCIDENCIA = v_id_incidencia;
IF V_INCIDENCIA.TIPO_INCIDENCIA != v_tipo_incidencia AND V_INCIDENCIA.FECHA_INCIDENCIA !=v_fecha_incidencia AND V_INCIDENCIA.OBSERVACION !=v_observacion AND V_INCIDENCIA.OBSERVACION !=v_id_incidencia THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (nombre_Prueba VARCHAR2,V_ID_INCIDENCIA IN incidencia.id_incidencia%TYPE, salidaEsperada BOOLEAN)
IS
v_NUMINCIDENCIA NUMBER := 0;
BEGIN
DELETE FROM INCIDENCIA WHERE ID_INCIDENCIA =v_id_incidencia;
SELECT COUNT(*) INTO v_NUMINCIDENCIA FROM INCIDENCIA WHERE ID_INCIDENCIA =v_id_incidencia;
IF V_NUMINCIDENCIA != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/

/* ************************************ PAQUETE LINEA DE FACTURA ************************************ */

create or replace PACKAGE PCK_LINEADEFACTURA
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE,V_PRECIO IN lineadefactura.precio%TYPE,V_CANTIDAD IN lineadefactura.cantidad%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE,V_PRECIO IN lineadefactura.precio%TYPE,V_CANTIDAD IN lineadefactura.cantidad%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE , salidaEsperada BOOLEAN);

END;
/
CREATE OR REPLACE PACKAGE BODY PCK_LineaDEFactura
IS
CURSOR C IS
SELECT ID_LINEADEFACTURA ,
PRECIO ,
CANTIDAD  FROM LINEADEFACTURA;
v_Salida BOOLEAN := TRUE;
v_LINEA LINEADEFACTURA%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM LINEADEFACTURA;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_LINEA;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_LINEADEFACTURA', 25) || RPAD('PRECIO', 75) || RPAD('CANTIDAD', 25) );
DBMS_OUTPUT.PUT_LINE(LPAD('-', 250, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(V_LINEA.ID_LINEADEFACTURA, 25) || RPAD(V_LINEA.PRECIO, 75) || RPAD(V_LINEA.CANTIDAD, 25));
FETCH C INTO v_LINEA;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE,V_PRECIO IN lineadefactura.precio%TYPE,V_CANTIDAD IN lineadefactura.cantidad%TYPE, salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO LINEADEFACTURA (ID_LINEADEFACTURA,PRECIO,CANTIDAD) VALUES (v_id_lineadefactura,v_precio,v_cantidad);
SELECT * INTO v_LINEA FROM LINEADEFACTURA WHERE id_lineadefactura = v_id_lineadefactura;
IF (V_LINEA.ID_LINEADEFACTURA != v_id_lineadefactura AND V_LINEA.PRECIO != v_precio AND V_LINEA.CANTIDAD != v_cantidad) THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE,V_PRECIO IN lineadefactura.precio%TYPE,V_CANTIDAD IN lineadefactura.cantidad%TYPE, salidaEsperada BOOLEAN)
IS
BEGIN
UPDATE LINEADEFACTURA SET id_lineadefactura = v_id_lineadefactura , precio = v_precio , cantidad = v_cantidad WHERE
id_lineadefactura = v_id_lineadefactura;
SELECT * INTO v_LINEA FROM LINEADEFACTURA WHERE ID_LINEADEFACTURA = v_id_lineadefactura;
IF v_LINEA.ID_LINEADEFACTURA != v_id_lineadefactura AND v_LINEA.PRECIO != v_precio AND v_LINEA.CANTIDAD != v_cantidad THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_LINEADEFACTURA IN lineadefactura.id_lineadefactura%TYPE , salidaEsperada BOOLEAN)
IS
v_NUMLINEAS NUMBER := 0;
BEGIN
DELETE FROM LINEADEFACTURA WHERE  ID_LINEADEFACTURA = v_id_lineadefactura;
SELECT COUNT(*) INTO v_NUMLINEAS FROM LINEADEFACTURA WHERE ID_LINEADEFACTURA = v_id_lineadefactura;
IF v_NumLINEAS != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/

/* ************************************ PAQUETE PROVEEDOR ************************************ */

create or replace PACKAGE PCK_PROVEEDOR
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, V_ID_PRODUCTO IN proveedor.id_producto%TYPE,V_NOMBRE_DUEÑO IN proveedor.nombre_dueño%TYPE,V_NOMBRE_EMPRESA IN proveedor.nombre_empresa%TYPE,V_TELEFONO IN proveedor.telefono%TYPE,V_DIRECCION IN proveedor.direccion%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, V_ID_PRODUCTO IN proveedor.id_producto%TYPE,V_NOMBRE_DUEÑO IN proveedor.nombre_dueño%TYPE,V_NOMBRE_EMPRESA IN proveedor.nombre_empresa%TYPE,V_TELEFONO IN proveedor.telefono%TYPE,V_DIRECCION IN proveedor.direccion%TYPE, salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, salidaEsperada BOOLEAN);

END;

/
CREATE OR REPLACE PACKAGE BODY PCK_PROVEEDOR
IS
CURSOR C IS
SELECT NOMBRE_EMPRESA ,
TELEFONO ,
DIRECCION ,
"NOMBRE_DUEÑO" ,
ID_PROVEEDOR ,
ID_PRODUCTO  FROM PROVEEDOR;
v_Salida BOOLEAN := TRUE;
v_PROVEEDOR PROVEEDOR%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM PROVEEDOR;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_PROVEEDOR;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_PROVEEDOR', 25) ||RPAD('ID_PRODUCTO', 25) || RPAD('NOMBRE_DUEÑO', 25) || RPAD('NOMBRE_EMPRESA', 25)|| RPAD('TELEFONO', 25)|| RPAD('DIRECCION', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 200, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(V_PROVEEDOR.ID_PROVEEDOR, 25) || RPAD(v_PROVEEDOR.ID_PRODUCTO, 25) || RPAD(v_PROVEEDOR.NOMBRE_DUEÑO, 25) || RPAD(v_PROVEEDOR.NOMBRE_EMPRESA, 25)|| RPAD('V_PROVEEDOR.TELEFONO',25)||rpad('V_PROVEEDOR.DIRECCION',25));
FETCH C INTO v_PROVEEDOR;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, V_ID_PRODUCTO IN proveedor.id_producto%TYPE,V_NOMBRE_DUEÑO IN proveedor.nombre_dueño%TYPE,V_NOMBRE_EMPRESA IN proveedor.nombre_empresa%TYPE,V_TELEFONO IN proveedor.telefono%TYPE,V_DIRECCION IN proveedor.direccion%TYPE, salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO PROVEEDOR (ID_PROVEEDOR,ID_PRODUCTO,NOMBRE_DUEÑO,NOMBRE_EMPRESA,TELEFONO,DIRECCION) VALUES (v_id_proveedor,v_id_producto,v_nombre_dueño,v_nombre_empresa,v_telefono,v_direccion);
SELECT NOMBRE_EMPRESA ,
TELEFONO ,
DIRECCION ,
"NOMBRE_DUEÑO" ,
ID_PROVEEDOR ,
ID_PRODUCTO OMBRE_EMPRESA ,
TELEFONO ,
DIRECCION ,
"NOMBRE_DUEÑO" ,
ID_PROVEEDOR ,
ID_PRODUCTO  INTO v_PROVEEDOR FROM PROVEEDOR WHERE ID_PROVEEDOR = v_ID_PROVEEDOR;
IF( V_PROVEEDOR.ID_PROVEEDOR != v_ID_PROVEEDOR AND v_PROVEEDOR.ID_PRODUCTO!= V_ID_PRODUCTO AND V_PROVEEDOR.NOMBRE_DUEÑO != v_NOMBRE_DUEÑO AND V_PROVEEDOR.NOMBRE_EMPRESA != V_NOMBRE_EMPRESA AND V_PROVEEDOR.TELEFONO != V_TELEFONO AND V_PROVEEDOR.direccion != V_DIRECCION )THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, V_ID_PRODUCTO IN proveedor.id_producto%TYPE,V_NOMBRE_DUEÑO IN proveedor.nombre_dueño%TYPE,V_NOMBRE_EMPRESA IN proveedor.nombre_empresa%TYPE,V_TELEFONO IN proveedor.telefono%TYPE,V_DIRECCION IN proveedor.direccion%TYPE, salidaEsperada BOOLEAN)
IS
BEGIN
UPDATE PROVEEDOR SET ID_PROVEEDOR = v_ID_PROVEEDOR, ID_PRODUCTO = V_ID_PRODUCTO, NOMBRE_DUEÑO = V_NOMBRE_DUEÑO ,NOMBRE_EMPRESA = V_NOMBRE_EMPRESA , TELEFONO = V_TELEFONO , DIRECCION = V_DIRECCION WHERE ID_PROVEEDOR = V_ID_PROVEEDOR;
SELECT NOMBRE_EMPRESA ,
TELEFONO ,
DIRECCION ,
"NOMBRE_DUEÑO" ,
ID_PROVEEDOR ,
ID_PRODUCTO  INTO v_PROVEEDOR FROM PROVEEDOR WHERE ID_PROVEEDOR= V_PROVEEDOR;
IF  V_PROVEEDOR.ID_PROVEEDOR != v_ID_PROVEEDOR AND v_PROVEEDOR.ID_PRODUCTO!= V_ID_PRODUCTO AND V_PROVEEDOR.NOMBRE_DUEÑO != v_NOMBRE_DUEÑO AND V_PROVEEDOR.NOMBRE_EMPRESA != V_NOMBRE_EMPRESA AND V_PROVEEDOR.TELEFONO != V_TELEFONO AND V_PROVEEDOR.direccion != V_DIRECCION  THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (nombre_Prueba VARCHAR2, V_ID_PROVEEDOR IN proveedor.id_proveedor%TYPE, salidaEsperada BOOLEAN)
IS
v_NumPROVEEDOR NUMBER := 0;
BEGIN
DELETE FROM PROVEEDOR WHERE ID_PROVEEDOR = v_ID_PROVEEDOR;
SELECT COUNT(*) INTO v_NumPROVEEDOR FROM PROVEEDOR WHERE ID_PROVEEDOR = v_ID_PROVEEDOR;
IF v_NumPROVEEDOR != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_Prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/

/* ************************************ PAQUETE PRODUCTO ************************************ */
create or replace PACKAGE PCK_Producto
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE,V_MARCA IN producto.marca%TYPE,V_MODELO IN producto.modelo%TYPE,V_NUMERO_BASTIDOR IN producto.numero_bastidor%TYPE,V_POTENCIA_MOTOR IN producto.potencia_motor%TYPE,V_TIPO_PRODUCTO IN producto.tipo_producto%TYPE,V_COLOR IN producto.color%TYPE, V_PRECIO_CON_IVA  IN producto.precio_con_iva%TYPE, V_STOCK IN producto.stock%TYPE , V_NUMERO_PLAZAS IN producto.numero_plazas%TYPE,salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE,V_MARCA IN producto.marca%TYPE,V_MODELO IN producto.modelo%TYPE,V_NUMERO_BASTIDOR IN producto.numero_bastidor%TYPE,V_POTENCIA_MOTOR IN producto.potencia_motor%TYPE,V_TIPO_PRODUCTO IN producto.tipo_producto%TYPE,V_COLOR IN producto.color%TYPE, V_PRECIO_CON_IVA  IN producto.precio_con_iva%TYPE, V_STOCK IN producto.stock%TYPE , V_NUMERO_PLAZAS IN producto.numero_plazas%TYPE,salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE, salidaEsperada BOOLEAN);

END;
/
create or replace PACKAGE BODY PCK_PRODUCTO
IS
CURSOR C IS
SELECT* FROM PRODUCTO;
v_Salida BOOLEAN := TRUE;
v_PRODUCTO PRODUCTO%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM PRODUCTO;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_PRODUCTO;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_PRODUCTO', 25) || RPAD('MARCA', 25)|| RPAD('MODELO', 25)|| RPAD('NUMERO_BASTIDOR', 25)|| RPAD('POTENCIA_MOTOR', 25)|| RPAD('TIPO_PRODUCTO', 25)|| RPAD('COLOR', 25)|| RPAD('COLOR', 25)|| RPAD('PRECIO_CON_IVA', 25)|| RPAD('STOCK', 25)|| RPAD('NUMERO_PLAZAS', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 250, '-'));
WHILE C%FOUND LOOP
    DBMS_OUTPUT.PUT_LINE(RPAD(V_PRODUCTO.ID_PRODUCTO, 25) || RPAD(V_PRODUCTO.MARCA, 25)|| RPAD(V_PRODUCTO.MODELO, 25)|| RPAD(V_PRODUCTO.NUMERO_BASTIDOR, 25) || RPAD(V_PRODUCTO.POTENCIA_MOTOR, 25)|| RPAD(V_PRODUCTO.TIPO_PRODUCTO, 25) || RPAD(V_PRODUCTO.COLOR, 25)|| RPAD(V_PRODUCTO.PRECIO_CON_IVA, 25)|| RPAD(V_PRODUCTO.STOCK, 25)|| RPAD(V_PRODUCTO.NUMERO_PLAZAS, 25));
FETCH C INTO v_PRODUCTO;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE,V_MARCA IN producto.marca%TYPE,V_MODELO IN producto.modelo%TYPE,V_NUMERO_BASTIDOR IN producto.numero_bastidor%TYPE,V_POTENCIA_MOTOR IN producto.potencia_motor%TYPE,V_TIPO_PRODUCTO IN producto.tipo_producto%TYPE,V_COLOR IN producto.color%TYPE, V_PRECIO_CON_IVA  IN producto.precio_con_iva%TYPE, V_STOCK IN producto.stock%TYPE , V_NUMERO_PLAZAS IN producto.numero_plazas%TYPE,salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO PRODUCTO (ID_PRODUCTO,MARCA,MODELO,NUMERO_BASTIDOR,POTENCIA_MOTOR,TIPO_PRODUCTO,COLOR,PRECIO_CON_IVA,STOCK,NUMERO_PLAZAS) VALUES (v_id_producto,v_marca,v_modelo,v_numero_bastidor,v_potencia_motor,v_tipo_producto,v_color,v_precio_con_iva,v_stock,v_numero_plazas);
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE,V_MARCA IN producto.marca%TYPE,V_MODELO IN producto.modelo%TYPE,V_NUMERO_BASTIDOR IN producto.numero_bastidor%TYPE,V_POTENCIA_MOTOR IN producto.potencia_motor%TYPE,V_TIPO_PRODUCTO IN producto.tipo_producto%TYPE,V_COLOR IN producto.color%TYPE, V_PRECIO_CON_IVA  IN producto.precio_con_iva%TYPE, V_STOCK IN producto.stock%TYPE , V_NUMERO_PLAZAS IN producto.numero_plazas%TYPE,salidaEsperada BOOLEAN)
IS
BEGIN
UPDATE PRODUCTO SET ID_PRODUCTO =v_id_producto,MARCA = v_marca,MODELO=v_modelo,NUMERO_BASTIDOR=v_numero_bastidor,POTENCIA_MOTOR=v_potencia_motor,TIPO_PRODUCTO=v_tipo_producto,COLOR=v_color,PRECIO_CON_IVA=v_precio_con_iva,STOCK=v_stock,NUMERO_PLAZAS = v_numero_plazas WHERE ID_PRODUCTO = v_id_producto;
SELECT *INTO v_PRODUCTO FROM PRODUCTO WHERE ID_PRODUCTO = v_id_producto;
IF V_PRODUCTO.ID_PRODUCTO!= v_id_producto AND v_PRODUCTO.MARCA  != v_marca AND v_PRODUCTO.MODELO != v_modelo AND V_PRODUCTO.NUMERO_BASTIDOR != v_numero_bastidor AND V_PRODUCTO.POTENCIA_MOTOR != v_potencia_motor AND V_PRODUCTO.TIPO_PRODUCTO !=v_tipo_producto AND V_PRODUCTO.COLOR != v_color AND V_PRODUCTO.PRECIO_CON_IVA !=v_precio_con_iva AND V_PRODUCTO.STOCK !=v_stock AND V_PRODUCTO.NUMERO_PLAZAS = v_numero_plazas THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_PRODUCTO IN producto.id_producto%TYPE, salidaEsperada BOOLEAN)
IS
v_numPRODUCTO NUMBER := 0;
BEGIN
DELETE FROM PRODUCTO WHERE ID_PRODUCTO = v_id_PRODUCTO;
SELECT COUNT(*) INTO v_numPRODUCTO FROM PRODUCTO WHERE ID_PRODUCTO = v_id_PRODUCTO;
IF v_numPRODUCTO != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;

/* ************************************ PAQUETE RESERVA ************************************ */

create or replace PACKAGE PCK_RESERVA
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_RESERVA IN reservas.id_reserva%TYPE, V_FECHA_RESERVA IN reservas.fecha_reserva%TYPE, V_ID_CLIENTE IN reservas.id_cliente%TYPE,V_ID_PRODUCTO IN reservas.id_producto%TYPE,V_ID_AGENTE IN reservas.id_agente%TYPE,salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_RESERVA IN reservas.id_reserva%TYPE, V_FECHA_RESERVA IN reservas.fecha_reserva%TYPE, V_ID_CLIENTE IN reservas.id_cliente%TYPE,V_ID_PRODUCTO IN reservas.id_producto%TYPE,V_ID_AGENTE IN reservas.id_agente%TYPE,salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_RESERVA IN reservas.id_reserva%TYPE, salidaEsperada BOOLEAN);

END;
/
create or replace PACKAGE BODY PCK_RESERVA
IS
CURSOR C IS
SELECT*FROM RESERVAS;
v_Salida BOOLEAN := TRUE;
v_RESERVAS RESERVAS%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM RESERVAS;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_RESERVAS;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_RESERVA', 25) || RPAD('FECHA_RESERVA', 25)|| RPAD('ID_CLIENTE', 25)|| RPAD('ID_PRODUCTO', 25)|| RPAD('ID_AGENTE', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 150, '-'));
WHILE C%FOUND LOOP
    DBMS_OUTPUT.PUT_LINE(RPAD(V_RESERVAS.ID_RESERVA, 25) || RPAD(V_RESERVAS.FECHA_RESERVA, 25)|| RPAD(V_RESERVAS.ID_CLIENTE, 25)|| RPAD(V_RESERVAS.ID_PRODUCTO, 25) || RPAD(V_RESERVAS.ID_AGENTE, 25));
FETCH C INTO v_RESERVAS;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2, V_ID_RESERVA IN reservas.id_reserva%TYPE, V_FECHA_RESERVA IN reservas.fecha_reserva%TYPE, V_ID_CLIENTE IN reservas.id_cliente%TYPE,V_ID_PRODUCTO IN reservas.id_producto%TYPE,V_ID_AGENTE IN reservas.id_agente%TYPE,salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO RESERVAS(ID_RESERVA,FECHA_RESERVA,ID_CLIENTE,ID_PRODUCTO,ID_AGENTE) VALUES (v_id_reserva,v_fecha_reserva,v_id_cliente,v_id_producto,v_id_agente);
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2, V_ID_RESERVA IN reservas.id_reserva%TYPE, V_FECHA_RESERVA IN reservas.fecha_reserva%TYPE, V_ID_CLIENTE IN reservas.id_cliente%TYPE,V_ID_PRODUCTO IN reservas.id_producto%TYPE,V_ID_AGENTE IN reservas.id_agente%TYPE,salidaEsperada BOOLEAN )
IS
BEGIN
UPDATE RESERVAS SET ID_RESERVA=v_id_reserva, FECHA_RESERVA=v_fecha_reserva,id_cliente= v_id_cliente,id_producto=v_id_producto,id_agente = v_id_agente WHERE ID_RESERVA = v_id_reserva;
SELECT * INTO v_RESERVAS FROM RESERVAS WHERE ID_RESERVA = v_id_reserva;
IF V_RESERVAS.ID_RESERVA != v_id_reserva AND v_RESERVAS.FECHA_RESERVA  != v_fecha_reserva AND v_RESERVAS.ID_CLIENTE != v_id_cliente AND V_RESERVAS.ID_PRODUCTO != v_id_producto AND V_RESERVAS.ID_AGENTE != v_id_agente THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_RESERVA IN reservas.id_reserva%TYPE, salidaEsperada BOOLEAN)
IS
v_numRESERVA NUMBER := 0;
BEGIN
DELETE FROM RESERVAS WHERE ID_RESERVA = v_id_reserva;
SELECT COUNT(*) INTO v_numRESERVA FROM RESERVAS WHERE ID_RESERVA = v_id_reserva;
IF v_numRESERVA != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;
/

/* ************************************ PAQUETE SERVICIOS ************************************ */

create or replace PACKAGE PCK_servicio
IS
PROCEDURE INICIALIZAR;
PROCEDURE CONSULTAR;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE,V_TIPO_SERVICIO IN servicios.tipo_servicio%TYPE,V_DESCRIPCION IN servicios.descripcion%TYPE,V_PRECIO IN servicios.precio%TYPE,V_ACTIVO IN servicios.activo%TYPE ,salidaEsperada BOOLEAN);
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE,V_TIPO_SERVICIO IN servicios.tipo_servicio%TYPE,V_DESCRIPCION IN servicios.descripcion%TYPE,V_PRECIO IN servicios.precio%TYPE,V_ACTIVO IN servicios.activo%TYPE ,salidaEsperada BOOLEAN);
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE, salidaEsperada BOOLEAN);

END;
/
create or replace PACKAGE BODY PCK_servicio
IS
CURSOR C IS
SELECT*FROM SERVICIOS;
v_Salida BOOLEAN := TRUE;
v_SERVICIO SERVICIOS%ROWTYPE;
PROCEDURE Inicializar
IS
BEGIN
DELETE FROM SERVICIOS;
END Inicializar;
PROCEDURE Consultar
IS
BEGIN
OPEN C;
FETCH C INTO v_SERVICIO;
DBMS_OUTPUT.PUT_LINE(RPAD('ID_SERVICIOS', 25) || RPAD('TIPO_SERVICIO', 25)|| RPAD('DESCRIPCION', 25)|| RPAD('PRECIO', 25)|| RPAD('ACTIVO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 125, '-'));
WHILE C%FOUND LOOP
    DBMS_OUTPUT.PUT_LINE(RPAD(V_SERVICIO.ID_SERVICIOS, 25) || RPAD(V_SERVICIO.TIPO_SERVICIO, 25)|| RPAD(V_SERVICIO.DESCRIPCION, 25)|| RPAD(V_SERVICIO.PRECIO, 25) || RPAD(V_SERVICIO.ACTIVO, 25));
FETCH C INTO v_SERVICIO;
END LOOP;
CLOSE C;
END Consultar;
PROCEDURE Insertar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE,V_TIPO_SERVICIO IN servicios.tipo_servicio%TYPE,V_DESCRIPCION IN servicios.descripcion%TYPE,V_PRECIO IN servicios.precio%TYPE,V_ACTIVO IN servicios.activo%TYPE ,salidaEsperada BOOLEAN)
IS
BEGIN
INSERT INTO SERVICIOS(ID_SERVICIOS,TIPO_SERVICIO,DESCRIPCION,PRECIO,ACTIVO) VALUES (v_id_servicioS,v_tipo_servicio,v_descripcion,v_precio,v_activo);
COMMIT;
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Insertar;
PROCEDURE Actualizar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE,V_TIPO_SERVICIO IN servicios.tipo_servicio%TYPE,V_DESCRIPCION IN servicios.descripcion%TYPE,V_PRECIO IN servicios.precio%TYPE,V_ACTIVO IN servicios.activo%TYPE ,salidaEsperada BOOLEAN )
IS
BEGIN
UPDATE SERVICIOS SET ID_SERVICIOS=v_id_SERVICIOS, TIPO_SERVICIO=v_tipo_servicio,DESCRIPCION= v_descripcion,PRECIO=v_precio,ACTIVO= v_activo WHERE ID_SERVICIOS = v_id_servicioS;
SELECT * INTO v_SERVICIO FROM SERVICIOS WHERE ID_SERVICIOS = v_id_servicioS;
IF V_SERVICIO.ID_SERVICIOS != v_id_SERVICIOS AND v_SERVICIO.TIPO_SERVICIO != v_tipo_servicio AND v_SERVICIO.DESCRIPCION != v_descripcion AND V_SERVICIO.PRECIO != v_precio AND V_SERVICIO.ACTIVO != v_activo THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Actualizar;
PROCEDURE Eliminar (NOMBRE_PRUEBA VARCHAR2,V_ID_SERVICIOS IN servicios.id_servicios%TYPE, salidaEsperada BOOLEAN)
IS
v_numSERVICIO NUMBER := 0;
BEGIN
DELETE FROM SERVICIOS WHERE ID_SERVICIOS = v_id_servicioS;
SELECT COUNT(*) INTO v_numSERVICIO FROM SERVICIOS WHERE ID_SERVICIOS = v_id_servicioS;
IF v_numSERVICIO != 0 THEN
v_Salida := FALSE;
END IF;
COMMIT;
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(v_Salida, salidaEsperada));
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(nombre_prueba || ': ' || ASSERT_EQUALS(FALSE, salidaEsperada));
ROLLBACK;
END Eliminar;
END;











